package com.jdivirgilio.spring5webapp.model;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;

import com.jdivirgilio.spring5webapp.model.Book;

@Entity // Must use javax.persistence.Entity 
public class Author {
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO) // This ID value needs to be unique and generated by this program. It COULD be a unique set of data but first and last name
                                                    // could be identical for other people. So we'll use ID and make it unique.
    private Long id; // ID is used by the DB. this is known as leakage. True OO world wouldn't care about an id
    private String firstName; // Not unique pertaining to persistence. Need to add a unique ID
    private String lastName;

    //@ManyToMany  // This generated AUTHOR_BOOKS and BOOK_AUTHOR in the h2 database. Not what we want
    @ManyToMany(mappedBy = "authors")
    private Set<Book> books = new HashSet<>();
    
    public Author() {
    }

    public Author(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName  = lastName;
    }

    public Author(String firstName, String lastName, Set<Book> books) {
        this.firstName = firstName;
        this.lastName  = lastName;
        this.books     = books;
    }

    public Long getId() { return id; }
    public String getFirstName() { return firstName; }
    public String getLastName()  { return lastName; }
    public Set<Book> getBooks()  { return books; }

    public void setId(Long id) { this.id = id; }
    public void setFirstName(String firstName) { this.firstName = firstName; }
    public void setLastName(String lastName)   { this.lastName  = lastName; }
    public void setBooks(Set<Book> books)      { this.books = books; }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Author author = (Author) o;
        return id != null ? id.equals(author.id) : author.id == null;
    }

    //@Override
    public int hashcode() {
        return id != null ? id.hashCode() : 0;
    }

    @Override
    public String toString() {
        return "Author {" + 
                "id=" + id +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", books=" + books + '}';
    }
}